// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your preferred database
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid()) @map("id")
  email       String      @unique
  password    String?
  firstName   String
  lastName    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  googleId    String?     @unique
  sessions    Session[]
  moodEntries MoodEntry[]
  journalAIs  JournalAI[]

  @@map("User")
}

model Session {
  id        String   @id @default(uuid()) @map("id")
  userId    String   @map("userId")
  expires   DateTime
  data      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model MoodEntry {
  id         String     @id @default(uuid()) @map("id")
  userId     String     @map("userId")
  emotionId  BigInt     @map("emotionId")
  createdAt  DateTime   @default(now())
  journalId  BigInt?    @map("journalId") // Changed to BigInt to match JournalAI.id
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  emotion    Emotion    @relation(fields: [emotionId], references: [id])
  journalAI  JournalAI? @relation(fields: [journalId], references: [id])

  @@map("MoodEntry")
}

model Emotion {
  id          BigInt      @id @default(autoincrement()) @map("id")
  name        String      @unique
  moodEntries MoodEntry[]
  blogs       Blog[]
  journalAIs  JournalAI[] // Added the missing relation field

  @@map("Emotion")
}

model JournalAI {
  id         BigInt      @id @default(autoincrement()) @map("id")
  createdAt  DateTime    @default(now())
  recap      String      @db.Text
  emotionId  BigInt      @map("emotionId")
  userId     String      @map("user_id") // Changed to String to match User.id
  moodEntries MoodEntry[]
  emotion    Emotion     @relation(fields: [emotionId], references: [id])
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("JournalAI")
}

model Blog {
  id          String    @id @default(uuid()) @map("id")
  title       String?
  description String    @db.Text
  createdAt   DateTime  @default(now())
  emotionId   BigInt    @map("emotionId") // Changed to BigInt to match Emotion.id
  emotion     Emotion   @relation(fields: [emotionId], references: [id])

  @@map("Blog")
}
